@model RigaMetro.Models.ViewModels.MapDataViewModel
@{
ViewBag.Title = "Map";
var token = (string)ViewData["MapboxToken"];
var json  = JsonSerializer.Serialize(Model);
}
<div id="map" style="width:100%; height:800px;"></div>

@section Scripts {
<script src="https://api.mapbox.com/mapbox-gl-js/v2.15.0/mapbox-gl.js"></script>
<script>
    mapboxgl.accessToken = '@token';
    const mapData = JSON.parse('@Html.Raw(json)');
    const map = new mapboxgl.Map({
        container: 'map',
        style: 'mapbox://styles/mapbox/dark-v11',
        center: [24.105078, 56.946285],
        zoom: 10
    });

    map.on('load', () => {
        // Сначала добавляем линии
        mapData.Lines.forEach(line => {
            const coords = line.Stations.map(s => [s.Longitude, s.Latitude]);
            map.addSource(`line-${line.LineID}`, {
                type: 'geojson',
                data: {
                    type: 'FeatureCollection',
                    features: [{
                        type: 'Feature',
                        properties: {},
                        geometry: {
                            type: 'LineString',
                            coordinates: coords
                        }
                    }]
                }
            });
            map.addLayer({
                id: `line-${line.LineID}`,
                type: 'line',
                source: `line-${line.LineID}`,
                layout: {
                    'line-join': 'round',
                    'line-cap': 'round'
                },
                paint: {
                    'line-color': line.Color,
                    'line-width': 9 // Сделайте линии толще, например 8
                }
            });
        });

        // Затем добавляем точки (слой окажется поверх линий)
        const stationFeatures = [];
        mapData.Lines.forEach(line => {
            line.Stations.forEach(s => {
                stationFeatures.push({
                    type: 'Feature',
                    properties: { name: s.Name },
                    geometry: {
                        type: 'Point',
                        coordinates: [s.Longitude, s.Latitude]
                    }
                });
            });
        });
        map.addSource('stations', {
            type: 'geojson',
            data: { type: 'FeatureCollection', features: stationFeatures }
        });
        map.addLayer({
            id: 'stations',
            type: 'circle',
            source: 'stations',
            paint: {
                'circle-color': '#ffffff',
                'circle-radius': 8,
                'circle-stroke-width': 3,
                'circle-stroke-color': '#000000'
            }
        });

        // Popup on hover
        const popup = new mapboxgl.Popup({
            closeButton: false,
            closeOnClick: false,
            className: 'transparent-popup'
        });
        map.on('mouseenter', 'stations', e => {
            map.getCanvas().style.cursor = 'pointer';
            const coords = e.features[0].geometry.coordinates.slice();
            const name = e.features[0].properties.name;
            popup.setLngLat(coords)
                .setHTML(`<div class="station-name">${name}</div>`)
                .addTo(map);
        });
        map.on('mouseleave', 'stations', () => {
            map.getCanvas().style.cursor = '';
            popup.remove();
        });
    });
</script>
}
