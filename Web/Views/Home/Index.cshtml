@model RigaMetro.Web.Models.ViewModels.MapDataViewModel
@{
    ViewBag.Title = "Map";
    var token = (string)ViewData["MapboxToken"];
    var json = JsonSerializer.Serialize(Model);
}

<div style="position:relative;">
    <div id="map" style="width:100%; height:800px;"></div>
    <div id="map-hint" class="map-hint">
        @Localization.GetKey("MapZoomHint")
    </div>
</div>

<div class="disclaimer mx-auto mt-4 mb-3">
    <div class="disclaimer-header d-flex justify-content-center align-items-center mb-2">
        <img src="/images/small-icon-riga-metro.svg" alt="icon" class="mb-2" style="height:50px;" />
        <h3 class="disclaimer-title mb-0">Rīgas metro</h3>
    </div>
    <p class="mb-2">
        <span class="disclaimer-accent">@Localization.GetKey("DisclaimerNote")</span>: @Localization.GetKey("DisclaimerText1")
    </p>
    <p class="mb-0">
        @Localization.GetKey("DisclaimerText2")
    </p>
</div>

@section Scripts {
    <script src="https://api.mapbox.com/mapbox-gl-js/v2.15.0/mapbox-gl.js"></script>
    <script>
        mapboxgl.accessToken = '@token';
        const mapData = JSON.parse('@Html.Raw(json)');

        const map = new mapboxgl.Map({
            container: 'map',
            style: 'mapbox://styles/mapbox/dark-v11',
            center: [24.105078, 56.946285],
            zoom: 10
        });

        map.scrollZoom.disable();

        map.getCanvas().addEventListener('wheel', function(e) {
            if (e.ctrlKey || e.metaKey) {
                map.scrollZoom.enable();
            } else {
                map.scrollZoom.disable();
            }
        });

        map.scrollZoom.disable();

        const mapHint = document.getElementById('map-hint');
        let hintHidden = false;
        map.getCanvas().addEventListener('wheel', function(e) {
            // Скрываем подсказку только если пользователь действительно зажал Ctrl (или Cmd на Mac)
            if ((e.ctrlKey || e.metaKey) && !hintHidden) {
                mapHint.classList.add('hide');
                hintHidden = true;
                setTimeout(() => mapHint.style.display = 'none', 400);
            }
        });


        // подготовка данных о линиях
        const lineInfoMap = {};
        mapData.Lines.forEach(line => {
            lineInfoMap[line.LineID] = {
                name: line.Name,
                color: line.Color,
                clockwiseTerminal: line.ClockwiseTerminal,
                counterclockwiseTerminal: line.CounterclockwiseTerminal
            };
        });

        map.on('load', () => {
            // рендер линий
            mapData.Lines.forEach(line => {
                const coords = line.Stations.map(s => [s.Longitude, s.Latitude]);
                map.addSource(`line-${line.LineID}`, {
                    type: 'geojson',
                    data: {
                        type: 'FeatureCollection',
                        features: [{
                            type: 'Feature',
                            geometry: {type: 'LineString', coordinates: coords}
                        }]
                    }
                });
                map.addLayer({
                    id: `line-${line.LineID}`,
                    type: 'line',
                    source: `line-${line.LineID}`,
                    layout: {'line-join': 'round', 'line-cap': 'round'},
                    paint: {'line-color': line.Color, 'line-width': 9}
                });
            });

            // рендер станций
            const stationFeatures = [];
            mapData.Lines.forEach(line => {
                line.Stations.forEach(s => {
                    stationFeatures.push({
                        type: 'Feature',
                        properties: {name: s.Name, stationId: s.StationID},
                        geometry: {type: 'Point', coordinates: [s.Longitude, s.Latitude]}
                    });
                });
            });
            map.addSource('stations', {type: 'geojson', data: {type: 'FeatureCollection', features: stationFeatures}});
            map.addLayer({
                id: 'stations', type: 'circle', source: 'stations',
                paint: {
                    'circle-color': '#fff', 'circle-radius': 8,
                    'circle-stroke-width': 3, 'circle-stroke-color': '#000'
                }
            });

            const hoverPopup = new mapboxgl.Popup({
                closeButton: false,
                closeOnClick: false,
                className: 'transparent-popup'
            });
            map.on('mouseenter', 'stations', e => {
                map.getCanvas().style.cursor = 'pointer';
                const coords = e.features[0].geometry.coordinates.slice();
                const name = e.features[0].properties.name;
                hoverPopup.setLngLat(coords).setHTML(`<div class="station-name">${name}</div>`).addTo(map);
            });
            map.on('mouseleave', 'stations', () => {
                map.getCanvas().style.cursor = '';
                hoverPopup.remove();
            });

            // клик — рендерим столько таблиц, сколько линий в station.Schedule
            map.on('click', 'stations', e => {
                const coords = e.features[0].geometry.coordinates.slice();
                const stationId = e.features[0].properties.stationId;
                let station;
                for (const line of mapData.Lines) {
                    station = line.Stations.find(s => s.StationID === stationId);
                    if (station) break;
                }
                if (!station || !station.Schedule || Object.keys(station.Schedule).length === 0) {
                    new mapboxgl.Popup({closeOnClick: true})
                        .setLngLat(coords)
                        .setHTML('<div class="no-schedule">Расписание отсутствует</div>')
                        .addTo(map);
                    return;
                }
                const html = generateStationScheduleHtml(station);
                new mapboxgl.Popup({closeOnClick: true, maxWidth: '800px', className: 'schedule-popup'})
                    .setLngLat(coords).setHTML(html).addTo(map);
            });
        });

        // функция рендеринга — теперь цикл создаёт несколько таблиц
        function generateStationScheduleHtml(station) {
            let html = `<div class="station-schedule"><h4>${station.Name}</h4>`;
            for (const [lineId, schedule] of Object.entries(station.Schedule)) {
                const info = lineInfoMap[lineId];
                if (!info) continue;
                html += `
        <div class="line-schedule" style="border-left:4px solid ${info.color};padding-left:10px;margin-bottom:20px">
            <h5 style="color:${info.color}">${info.name}</h5>
            <div class="direction-schedule">
                <h6>@Localization.GetKey("Towards") ${info.clockwiseTerminal}</h6>
                ${generateHourlyScheduleTable(schedule.Clockwise)}
            </div>
            <div class="direction-schedule">
                <h6>@Localization.GetKey("Towards") ${info.counterclockwiseTerminal}</h6>
                ${generateHourlyScheduleTable(schedule.Counterclockwise)}
            </div>
        </div>`;
            }
            html += '</div>';
            return html;
        }

        function generateHourlyScheduleTable(hourlySchedule) {
            let html = '<table class="schedule-table"><thead><tr>';
            for (let h = 0; h < 24; h++) html += `<th>${h.toString().padStart(2, '0')}</th>`;
            html += '</tr></thead><tbody><tr>';
            for (let h = 0; h < 24; h++) {
                html += '<td>';
                if (hourlySchedule[h]?.length) {
                    hourlySchedule[h].forEach(m => {
                        html += `<div>${m.toString().padStart(2, '0')}</div>`;
                    });
                }
                html += '</td>';
            }
            html += '</tr></tbody></table>';
            return html;
        }
    </script>
}
