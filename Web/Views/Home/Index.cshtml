@model RigaMetro.Web.Models.ViewModels.MapDataViewModel
@{
    ViewBag.Title = "Map";
    var token = (string)ViewData["MapboxToken"];
    var json = JsonSerializer.Serialize(Model);
}

<div id="map" style="width:100%; height:800px;"></div>

@section Scripts {
    <script src="https://api.mapbox.com/mapbox-gl-js/v2.15.0/mapbox-gl.js"></script>
    <script>
        mapboxgl.accessToken = '@token';
        const mapData = JSON.parse('@Html.Raw(json)');

        // Создаем карту линий для быстрого поиска
        const lineInfoMap = {};
        mapData.Lines.forEach(line => {
            lineInfoMap[line.LineID] = {
                name: line.Name,
                color: line.Color
            };
        });

        const map = new mapboxgl.Map({
            container: 'map',
            style: 'mapbox://styles/mapbox/dark-v11',
            center: [24.105078, 56.946285],
            zoom: 10
        });

        map.on('load', () => {
            // Сначала добавляем линии
            mapData.Lines.forEach(line => {
                const coords = line.Stations.map(s => [s.Longitude, s.Latitude]);
                map.addSource(`line-${line.LineID}`, {
                    type: 'geojson',
                    data: {
                        type: 'FeatureCollection',
                        features: [{
                            type: 'Feature',
                            properties: {},
                            geometry: {
                                type: 'LineString',
                                coordinates: coords
                            }
                        }]
                    }
                });
                map.addLayer({
                    id: `line-${line.LineID}`,
                    type: 'line',
                    source: `line-${line.LineID}`,
                    layout: {
                        'line-join': 'round',
                        'line-cap': 'round'
                    },
                    paint: {
                        'line-color': line.Color,
                        'line-width': 9
                    }
                });
            });

            // Затем добавляем точки (слой окажется поверх линий)
            const stationFeatures = [];
            mapData.Lines.forEach(line => {
                line.Stations.forEach(s => {
                    stationFeatures.push({
                        type: 'Feature',
                        properties: {
                            name: s.Name,
                            stationId: s.StationID
                        },
                        geometry: {
                            type: 'Point',
                            coordinates: [s.Longitude, s.Latitude]
                        }
                    });
                });
            });

            map.addSource('stations', {
                type: 'geojson',
                data: {type: 'FeatureCollection', features: stationFeatures}
            });

            map.addLayer({
                id: 'stations',
                type: 'circle',
                source: 'stations',
                paint: {
                    'circle-color': '#ffffff',
                    'circle-radius': 8,
                    'circle-stroke-width': 3,
                    'circle-stroke-color': '#000000'
                }
            });

            // Popup on hover
            const popup = new mapboxgl.Popup({
                closeButton: false,
                closeOnClick: false,
                className: 'transparent-popup'
            });

            map.on('mouseenter', 'stations', e => {
                map.getCanvas().style.cursor = 'pointer';
                const coords = e.features[0].geometry.coordinates.slice();
                const name = e.features[0].properties.name;
                popup.setLngLat(coords)
                    .setHTML(`<div class="station-name">${name}</div>`)
                    .addTo(map);
            });

            map.on('mouseleave', 'stations', () => {
                map.getCanvas().style.cursor = '';
                popup.remove();
            });

            // Click для показа расписания
            map.on('click', 'stations', e => {
                const coords = e.features[0].geometry.coordinates.slice();
                const stationName = e.features[0].properties.name;
                const stationId = e.features[0].properties.stationId;

                // Найти станцию в данных
                let station = null;
                for (const line of mapData.Lines) {
                    station = line.Stations.find(s => s.StationID === stationId);
                    if (station) break;
                }

                if (!station || !station.Schedule || Object.keys(station.Schedule).length === 0) {
                    new mapboxgl.Popup({closeOnClick: true})
                        .setLngLat(coords)
                        .setHTML('<div class="no-schedule">Расписание для данной станции отсутствует</div>')
                        .addTo(map);
                    return;
                }

                const scheduleHtml = generateStationScheduleHtml(station, lineInfoMap);

                new mapboxgl.Popup({
                    closeOnClick: true,
                    maxWidth: '800px',
                    className: 'schedule-popup'
                })
                    .setLngLat(coords)
                    .setHTML(scheduleHtml)
                    .addTo(map);
            });
        });

        // Функция генерации HTML для расписания станции
        function generateStationScheduleHtml(station) {
            let html = `<div class="station-schedule"><h4>${station.Name}</h4>`;

            for (const [lineId, schedule] of Object.entries(station.Schedule)) {
                const line = mapData.Lines.find(l => l.LineID === lineId);
                if (!line) continue;

                const terminalCW = line.ClockwiseTerminal;
                const terminalCCW = line.CounterclockwiseTerminal;

                html += `
        <div class="line-schedule" style="border-left:4px solid ${line.Color};
                                          padding-left:10px;margin-bottom:20px">
            <h5 style="color:${line.Color}">${line.Name}</h5>

            <div class="direction-schedule">
                <h6>В&nbsp;сторону&nbsp;${terminalCW}</h6>
                ${generateHourlyScheduleTable(schedule.Clockwise)}
            </div>

            <div class="direction-schedule">
                <h6>В&nbsp;сторону&nbsp;${terminalCCW}</h6>
                ${generateHourlyScheduleTable(schedule.Counterclockwise)}
            </div>
        </div>`;
            }

            return html + '</div>';
        }


        // Функция генерации таблицы расписания по часам
        function generateHourlyScheduleTable(hourlySchedule) {
            let html = `
            <table class="schedule-table">
                <thead>
                    <tr>
        `;

            // Заголовки часов
            for (let hour = 0; hour < 24; hour++) {
                html += `<th>${hour.toString().padStart(2, '0')}</th>`;
            }

            html += `
                    </tr>
                </thead>
                <tbody>
                    <tr>
        `;

            // Данные по часам
            for (let hour = 0; hour < 24; hour++) {
                html += '<td>';
                if (hourlySchedule[hour] && hourlySchedule[hour].length > 0) {
                    hourlySchedule[hour].forEach(minute => {
                        html += `<div>${minute.toString().padStart(2, '0')}</div>`;
                    });
                }
                html += '</td>';
            }

            html += `
                    </tr>
                </tbody>
            </table>
        `;

            return html;
        }
    </script>
}
