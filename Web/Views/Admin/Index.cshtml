@model RigaMetro.Web.Models.ViewModels.Admin.AdminDataViewModel
@{
    Layout = "_AdminLayout";
}

<header
    class="d-md-none text-white py-2 px-3 d-flex align-items-center justify-content-between position-fixed w-100 top-0 start-0"
    style="z-index: 1055; background: var(--color-bg-darker);">
    <input type="checkbox" id="burger-checkbox" class="burger-checkbox d-md-none" autocomplete="off">
    <label class="burger d-md-none" for="burger-checkbox">
        <span></span>
        <span></span>
        <span></span>
    </label>
    <span class="ms-2 fw-bold">@Localization.GetKey("AdminPanel")</span>
</header>


@* =================== MOBILE SIDEBAR =================== *@
<div class="offcanvas offcanvas-start d-md-none bg-dark text-white" tabindex="-1" id="adminSidebarOffcanvas"
     aria-labelledby="adminSidebarLabel">
    <div class="offcanvas-header">
        <button type="button" class="btn-close" data-bs-dismiss="offcanvas" aria-label="Close"></button>
    </div>
    <div class="offcanvas-body p-0 d-flex flex-column justify-content-between">
        @await Html.PartialAsync("_AdminSidebarContent", new { clockId = "riga-time-mobile" })
    </div>
</div>

@* =================== DESKTOP SIDEBAR =================== *@
<aside class="admin-sidebar d-none d-md-flex flex-column justify-content-between align-items-center">
    @await Html.PartialAsync("_AdminSidebarContent", new { clockId = "riga-time-desktop" })
</aside>

@* =================== MAIN CONTENT =================== *@
<section class="admin-main-content mt-3">
    @* ----------- DASHBOARD TAB ----------- *@
    <div id="admin-tab-dashboard" class="admin-tab-content">
        <h2 class="mb-3 text-uppercase" style="font-weight:700;">@Localization.GetKey("SummaryStatistics")</h2>
        <div class="table-responsive">
            <table class="table table-dark table-sm text-center align-middle mb-4">
                <thead>
                <tr>
                    <th>@Localization.GetKey("Lines")</th>
                    <th>@Localization.GetKey("Stations")</th>
                    <th>@Localization.GetKey("Trains")</th>
                    <th>@Localization.GetKey("ActiveTrains")</th>
                    <th>@Localization.GetKey("LengthOfNetwork")</th>
                    <th>@Localization.GetKey("TripsPerDay")</th>
                </tr>
                </thead>
                <tbody>
                <tr>
                    <td>@Model.AdminStatistics.TotalLines</td>
                    <td>@Model.AdminStatistics.TotalStations</td>
                    <td>@Model.AdminStatistics.TotalTrains</td>
                    <td>@Model.AdminStatistics.ActiveTrains</td>
                    <td>@Model.AdminStatistics.TotalNetworkDistanceKm.ToString("F1")</td>
                    <td>@Model.AdminStatistics.TotalDailyTrips</td>
                </tr>
                </tbody>
            </table>
        </div>

        <h3 class="mb-3 text-uppercase" style="font-weight:700;">@Localization.GetKey("StatisticsByLine")</h3>
        <div class="table-responsive">
            <table class="table table-striped table-bordered table-sm text-center align-middle">
                <thead class="table-dark">
                <tr>
                    <th>@Localization.GetKey("Line")</th>
                    <th>@Localization.GetKey("Stations")</th>
                    <th>@Localization.GetKey("LengthKm")</th>
                    <th>@Localization.GetKey("TripsPerDay")</th>
                    <th>@Localization.GetKey("TrainsScheduled")</th>
                </tr>
                </thead>
                <tbody>
                @foreach (var s in Model.AdminStatistics.LineStatistics) {
                    <tr>
                        <td>
                            <span class="badge" style="background:@s.LineColor">@s.LineName</span>
                        </td>
                        <td>@s.StationCount</td>
                        <td>@s.TotalDistanceKm.ToString("F1")</td>
                        <td>@s.DailyTripsCount</td>
                        <td>@s.AssignedTrainsCount</td>
                    </tr>
                }
                </tbody>
            </table>
        </div>
        <h3 class="mt-3 mb-3 text-uppercase" style="font-weight:700;">@Localization.GetKey("NumberOfTripsPerHour")</h3>
        <div class="chart-container mb-4" style="max-width:100%;height:500px;position:relative;">
            <canvas id="tripsPerLineChart"></canvas>
        </div>
    </div>
    @* ----------- TRAINS TAB ----------- *@
    <div id="admin-tab-trains" class="admin-tab-content d-none">
        <h2 class="mb-3 text-uppercase" style="font-weight:700;">@Localization.GetKey("ListOfTrains")</h2>
        <div class="table-responsive">
            <table id="trainsTable" class="table table-striped table-bordered table-sm text-center align-middle">
                <thead class="table-dark">
                <tr>
                    <th>ID</th>
                    <th>@Localization.GetKey("NumberOfTrain")</th>
                    <th>@Localization.GetKey("Line")</th>
                    <th>@Localization.GetKey("StartOfWork")</th>
                    <th>@Localization.GetKey("EndOfWork")</th>
                    <th>@Localization.GetKey("Status")</th>
                    <th>@Localization.GetKey("Actions")</th>
                </tr>
                </thead>
                <tbody>
                @foreach (var train in Model.Trains) {
                    <tr data-train-id="@train.TrainID">
                        <td>@train.TrainID</td>
                        <td data-order="@train.TrainName">
                            <input type="text" name="TrainName" class="form-control form-control-sm"
                                   value="@train.TrainName" disabled/>
                        </td>
                        <td data-order="@(Model.Lines.FirstOrDefault(l => l.LineID == train.LineID)?.Name ?? "")">
                            @Html.DropDownList(
                                "LineID",
                                new SelectList(Model.Lines, "LineID", "Name", train.LineID),
                                new { @class = "form-select form-select-sm", disabled = "disabled" }
                            )
                        </td>
                        <td data-order="@(new DateTime(train.StartWorkTime.Ticks).ToString("HH:mm"))">
                            <input type="text" class="form-control timepicker" name="StartWorkTime" required value="@(new DateTime(train.StartWorkTime.Ticks).ToString("HH:mm"))" disabled/>
                        </td>
                        <td data-order="@(new DateTime(train.EndWorkTime.Ticks).ToString("HH:mm"))">
                            <input type="text" class="form-control timepicker" name="EndWorkTime" required value="@(new DateTime(train.EndWorkTime.Ticks).ToString("HH:mm"))" disabled/>
                        </td>
                        <td data-order="@(train.IsActive ? "Active" : "Inactive")">
                            <span class="badge @(train.IsActive ? "bg-success" : "bg-secondary") status-display">
                                @(train.IsActive ? "Active" : "Inactive")
                            </span>
                            <select name="IsActive"
                                    class="form-select form-select-sm status-editor d-none"
                                    data-value="@train.IsActive.ToString().ToLower()">
                                <option value="true">@Localization.GetKey("Active")</option>
                                <option value="false">@Localization.GetKey("Inactive")</option>
                            </select>
                        </td>
                        <td class="text-nowrap" style="min-width: 120px;">
                            <div class="d-inline-flex gap-2 w-100">
                                <button type="button"
                                        class="btn btn-sm btn-outline-primary edit-btn flex-fill">@Localization.GetKey("Edit")</button>
                                <button type="button"
                                        class="btn btn-sm btn-outline-danger delete-btn flex-fill">@Localization.GetKey("Delete")</button>
                            </div>
                        </td>
                    </tr>
                }
                </tbody>
            </table>
        </div>
        <button type="button" class="btn btn-success mt-3" data-bs-toggle="modal" data-bs-target="#createTrainModal">
            @Localization.GetKey("AddTrain")
        </button>

        <!-- Train creation window -->
        <div class="modal fade" id="createTrainModal" tabindex="-1" aria-labelledby="createTrainLabel"
             aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="createTrainLabel">@Localization.GetKey("NewTrain")</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                    </div>
                    <div class="modal-body">
                        <form id="createTrainForm">
                            <div class="mb-2">
                                <label class="form-label">@Localization.GetKey("TrainName")</label>
                                <input type="text" name="TrainName" class="form-control" required/>
                            </div>
                            <div class="mb-2">
                                <label class="form-label">@Localization.GetKey("Line")</label>
                                @Html.DropDownList("LineID", new SelectList(Model.Lines, "LineID", "Name"), "Select a line", new { @class = "form-select", required = "required" })
                            </div>
                            <div class="mb-2">
                                <label class="form-label">@Localization.GetKey("StartOfWork")</label>
                                <input type="text" class="form-control timepicker" name="StartWorkTime" required/>
                            </div>
                            <div class="mb-2">
                                <label class="form-label">@Localization.GetKey("EndOfWork")</label>
                                <input type="text" class="form-control timepicker" name="EndWorkTime" required/>
                            </div>
                            <div class="mb-2">
                                <label class="form-label">@Localization.GetKey("Status")</label>
                                <select name="IsActive" class="form-select">
                                    <option value="true">@Localization.GetKey("Active")</option>
                                    <option value="false">@Localization.GetKey("Inactive")</option>
                                </select>
                            </div>
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary"
                                data-bs-dismiss="modal">@Localization.GetKey("Cancel")</button>
                        <button type="button" id="createTrainBtn"
                                class="btn btn-primary">@Localization.GetKey("Create")</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
    @* ----------- LINES TAB ----------- *@
    <div id="admin-tab-lines" class="admin-tab-content d-none">
        <h2 class="mb-3 text-uppercase" style="font-weight:700;">@Localization.GetKey("ListOfLines")</h2>
        <div class="table-responsive">
            <table class="table table-striped table-bordered table-sm text-center align-middle">
                <thead class="table-dark">
                <tr>
                    <th>@Localization.GetKey("LineID")</th>
                    <th>@Localization.GetKey("Name")</th>
                    <th>@Localization.GetKey("StartWork")</th>
                    <th>@Localization.GetKey("EndWork")</th>
                    <th>@Localization.GetKey("Color")</th>
                    <th>@Localization.GetKey("Actions")</th>
                </tr>
                </thead>
                <tbody>
                @foreach (var line in Model.Lines) {
                    <tr data-line-id="@line.LineID">
                        <td>@line.LineID</td>
                        <td>@line.Name</td>
                        <td>
                            <input type="text" class="form-control form-control-sm timepicker" name="StartWorkTime" value="@(new DateTime(line.StartWorkTime.Ticks).ToString("HH:mm"))" disabled/>
                        </td>
                        <td>
                            <input type="text" class="form-control form-control-sm timepicker" name="EndWorkTime" value="@(new DateTime(line.EndWorkTime.Ticks).ToString("HH:mm"))" disabled/>
                        </td>
                        <td>
                            <input type="color" name="Color"
                                   class="form-control form-control-sm form-control-color"
                                   value="@line.Color"
                                   disabled/>
                        </td>
                        <td>
                            <button type="button"
                                    class="btn btn-sm btn-outline-primary edit-line-btn">@Localization.GetKey("Edit")</button>
                        </td>
                    </tr>
                }
                </tbody>
            </table>
        </div>
    </div>
    @* ----------- EXPORT TAB ----------- *@
    <div id="admin-tab-export" class="admin-tab-content d-none">
        <div class="d-flex flex-column justify-content-center align-items-center" style="min-height: 45vh;">
            <span class="display-4 fw-bold text-center mb-3" style="letter-spacing: 0.03em; color: var(--color-accent); text-shadow: 0 2px 12px rgba(0,0,0,0.25);">
                @Localization.GetKey("ExportDisclaimerTitle")
            </span>
            <span class="fs-3 text-center" style="color: #ddd;">
                @Localization.GetKey("ExportDisclaimer")
            </span>
        </div>
    </div>
</section>


@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script type="module">
        import {renderTripsPerHourChart} from '/js/trips-per-hour-chart.js';
        import { initTrainCrud } from '/js/train-crud.js';
        import { initLineCrud } from '/js/line-crud.js';

        document.addEventListener('DOMContentLoaded', function () {

            //#region AdminNavigation

            const navLinks = document.querySelectorAll('.admin-nav-link');
            const tabContents = document.querySelectorAll('.admin-tab-content');

            navLinks.forEach(link => {
                link.addEventListener('click', function () {
                    navLinks.forEach(l => l.classList.remove('active'));
                    this.classList.add('active');
                    tabContents.forEach(tc => tc.classList.add('d-none'));
                    document.getElementById('admin-tab-' + this.getAttribute('data-tab')).classList.remove('d-none');
                });
            });

            //#endregion

            //#region Chart

            const chartData = @Html.Raw(Model.AdminStatistics.TripsPerLineHourlyJson);
            renderTripsPerHourChart('tripsPerLineChart', chartData);

            //#endregion

            //#region TrainTableCRUD

            initTrainCrud({
                edit: '@Html.Raw(@Localization.GetKey("Edit"))',
                save: '@Html.Raw(@Localization.GetKey("Save"))',
                alertStartTime: '@Html.Raw(@Localization.GetKey("AlertStartTime"))',
                failedToSave: '@Html.Raw(@Localization.GetKey("FailedToSave"))',
                failedToDelete: '@Html.Raw(@Localization.GetKey("FailedToDelete"))',
                failedToCreate: '@Html.Raw(@Localization.GetKey("FailedToCreate") ?? "Failed to create")',
                removeTrain: '@Html.Raw(@Localization.GetKey("RemoveTrain"))'
            });
            
            //#endregion

            //#region LineTableCRUD

            initLineCrud({
                save: '@Html.Raw(@Localization.GetKey("Save"))',
                alertStartTime: '@Html.Raw(@Localization.GetKey("AlertStartTime"))',
                failedToUpdateLine: '@Html.Raw(@Localization.GetKey("FailedToUpdateLine") ?? "Failed to update")'
            });

            //#endregion

            //#region DataTable

            $('#trainsTable').DataTable({
                "autoWidth": false,
                "paging": false,
                "searching": false,
                "ordering": true,
                "info": false,
                "lengthChange": false,
                "columnDefs": [
                    {"orderable": false, "targets": 6},
                ],
                "language": {
                    "url": "https://cdn.datatables.net/plug-ins/1.13.4/i18n/ru.json"
                }
            });

            //#endregion

            //#region MobileDesign

            const offcanvasEl = document.getElementById('adminSidebarOffcanvas');
            const bsOffcanvas = bootstrap.Offcanvas.getOrCreateInstance(offcanvasEl);
            const burgerCheckbox = document.getElementById('burger-checkbox');

            burgerCheckbox.addEventListener('change', function () {
                if (this.checked) {
                    bsOffcanvas.show();
                } else {
                    bsOffcanvas.hide();
                }
            });

            offcanvasEl.addEventListener('hidden.bs.offcanvas', function () {
                burgerCheckbox.checked = false;
            });
            offcanvasEl.addEventListener('shown.bs.offcanvas', function () {
                burgerCheckbox.checked = true;
            });

            offcanvasEl.querySelectorAll('.admin-nav-link, .admin-nav-link-action').forEach(link => {
                link.addEventListener('click', function () {
                    if (window.innerWidth < 768) {
                        bsOffcanvas.hide();
                    }
                });
            });

            //#endregion

            //#region Clocks

            window.currentCulture = '@System.Globalization.CultureInfo.CurrentUICulture.Name';
            const locale = window.currentCulture || 'en-US';
            setupRigaClock('riga-time-desktop', true, locale);
            setupRigaClock('riga-time-mobile', true, locale);

            //#endregion
            
            
            //#region Timepicker
            $(function(){
                $('.timepicker').timepicker({
                    showMeridian: false, // 24-hour format
                    defaultTime: false,
                    minuteStep: 1
                });
            });
            // #endregion
        });
    </script>
}

