// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using RigaMetro.Data;

#nullable disable

namespace RigaMetro.Migrations
{
    [DbContext(typeof(MetroDbContext))]
    partial class MetroDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("RigaMetro.Models.Line", b =>
                {
                    b.Property<int>("LineID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("LineID"));

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("EndWorkTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsClockwiseDirection")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("StartWorkTime")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("LineID");

                    b.ToTable("Lines");

                    b.HasData(
                        new
                        {
                            LineID = 1,
                            Color = "#FF0000",
                            EndWorkTime = new DateTime(2000, 1, 1, 23, 0, 0, 0, DateTimeKind.Unspecified),
                            IsClockwiseDirection = true,
                            Name = "Sarkandaugava–Ziepniekkalns",
                            StartWorkTime = new DateTime(2000, 1, 1, 6, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("RigaMetro.Models.LineSchedule", b =>
                {
                    b.Property<int>("ScheduleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ScheduleID"));

                    b.Property<bool>("IsClockwise")
                        .HasColumnType("boolean");

                    b.Property<int>("LineID")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("TripNumber")
                        .HasColumnType("integer");

                    b.HasKey("ScheduleID");

                    b.HasIndex("LineID");

                    b.ToTable("LineSchedules");
                });

            modelBuilder.Entity("RigaMetro.Models.LineStation", b =>
                {
                    b.Property<int>("LineID")
                        .HasColumnType("integer");

                    b.Property<int>("StationID")
                        .HasColumnType("integer");

                    b.Property<int>("StationOrder")
                        .HasColumnType("integer");

                    b.HasKey("LineID", "StationID");

                    b.HasIndex("StationID");

                    b.ToTable("LineStations");

                    b.HasData(
                        new
                        {
                            LineID = 1,
                            StationID = 1,
                            StationOrder = 1
                        },
                        new
                        {
                            LineID = 1,
                            StationID = 2,
                            StationOrder = 2
                        },
                        new
                        {
                            LineID = 1,
                            StationID = 3,
                            StationOrder = 3
                        },
                        new
                        {
                            LineID = 1,
                            StationID = 4,
                            StationOrder = 4
                        },
                        new
                        {
                            LineID = 1,
                            StationID = 5,
                            StationOrder = 5
                        },
                        new
                        {
                            LineID = 1,
                            StationID = 6,
                            StationOrder = 6
                        },
                        new
                        {
                            LineID = 1,
                            StationID = 7,
                            StationOrder = 7
                        },
                        new
                        {
                            LineID = 1,
                            StationID = 8,
                            StationOrder = 8
                        },
                        new
                        {
                            LineID = 1,
                            StationID = 9,
                            StationOrder = 9
                        },
                        new
                        {
                            LineID = 1,
                            StationID = 10,
                            StationOrder = 10
                        });
                });

            modelBuilder.Entity("RigaMetro.Models.ScheduleStop", b =>
                {
                    b.Property<int>("ScheduleID")
                        .HasColumnType("integer");

                    b.Property<int>("StationOrder")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ArrivalTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DepartureTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("StationID")
                        .HasColumnType("integer");

                    b.HasKey("ScheduleID", "StationOrder");

                    b.HasIndex("StationID");

                    b.ToTable("ScheduleStops");
                });

            modelBuilder.Entity("RigaMetro.Models.Station", b =>
                {
                    b.Property<int>("StationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("StationID"));

                    b.Property<double>("Latitude")
                        .HasColumnType("double precision");

                    b.Property<double>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("StationID");

                    b.ToTable("Stations");

                    b.HasData(
                        new
                        {
                            StationID = 1,
                            Latitude = 57.003383999999997,
                            Longitude = 24.118736999999999,
                            Name = "Sarkandaugava"
                        },
                        new
                        {
                            StationID = 2,
                            Latitude = 56.991002000000002,
                            Longitude = 24.122138,
                            Name = "Rupnica RER"
                        },
                        new
                        {
                            StationID = 3,
                            Latitude = 56.974578999999999,
                            Longitude = 24.111671000000001,
                            Name = "Ramulu iela"
                        },
                        new
                        {
                            StationID = 4,
                            Latitude = 56.964005999999998,
                            Longitude = 24.106183000000001,
                            Name = "Petersala"
                        },
                        new
                        {
                            StationID = 5,
                            Latitude = 56.956935000000001,
                            Longitude = 24.101257,
                            Name = "Kronvalda parks"
                        },
                        new
                        {
                            StationID = 6,
                            Latitude = 56.947561,
                            Longitude = 24.119751999999998,
                            Name = "Stacijas laukums"
                        },
                        new
                        {
                            StationID = 7,
                            Latitude = 56.933002999999999,
                            Longitude = 24.121713,
                            Name = "Zaķusala"
                        },
                        new
                        {
                            StationID = 8,
                            Latitude = 56.919696999999999,
                            Longitude = 24.098175999999999,
                            Name = "Straume"
                        },
                        new
                        {
                            StationID = 9,
                            Latitude = 56.912930000000003,
                            Longitude = 24.069526,
                            Name = "Dzintars"
                        },
                        new
                        {
                            StationID = 10,
                            Latitude = 56.898448000000002,
                            Longitude = 24.092072999999999,
                            Name = "Ziepniekkalns"
                        });
                });

            modelBuilder.Entity("RigaMetro.Models.TimeBetweenStations", b =>
                {
                    b.Property<int>("FromStationID")
                        .HasColumnType("integer");

                    b.Property<int>("ToStationID")
                        .HasColumnType("integer");

                    b.Property<int>("DistanceM")
                        .HasColumnType("integer");

                    b.Property<int>("TimeSeconds")
                        .HasColumnType("integer");

                    b.HasKey("FromStationID", "ToStationID");

                    b.HasIndex("ToStationID");

                    b.ToTable("TimeBetweenStations");
                });

            modelBuilder.Entity("RigaMetro.Models.Train", b =>
                {
                    b.Property<int>("TrainID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TrainID"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int>("LineID")
                        .HasColumnType("integer");

                    b.Property<string>("TrainName")
                        .HasColumnType("text");

                    b.HasKey("TrainID");

                    b.HasIndex("LineID");

                    b.ToTable("Trains");
                });

            modelBuilder.Entity("RigaMetro.Models.TrainAssignment", b =>
                {
                    b.Property<int>("TrainID")
                        .HasColumnType("integer");

                    b.Property<int>("ScheduleID")
                        .HasColumnType("integer");

                    b.Property<DateTime>("AssignmentDate")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("TrainID", "ScheduleID", "AssignmentDate");

                    b.HasIndex("ScheduleID");

                    b.ToTable("TrainAssignments");
                });

            modelBuilder.Entity("RigaMetro.Models.LineSchedule", b =>
                {
                    b.HasOne("RigaMetro.Models.Line", "Line")
                        .WithMany("LineSchedules")
                        .HasForeignKey("LineID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Line");
                });

            modelBuilder.Entity("RigaMetro.Models.LineStation", b =>
                {
                    b.HasOne("RigaMetro.Models.Line", "Line")
                        .WithMany("LineStations")
                        .HasForeignKey("LineID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RigaMetro.Models.Station", "Station")
                        .WithMany()
                        .HasForeignKey("StationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Line");

                    b.Navigation("Station");
                });

            modelBuilder.Entity("RigaMetro.Models.ScheduleStop", b =>
                {
                    b.HasOne("RigaMetro.Models.LineSchedule", "Schedule")
                        .WithMany("Stops")
                        .HasForeignKey("ScheduleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RigaMetro.Models.Station", "Station")
                        .WithMany()
                        .HasForeignKey("StationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Schedule");

                    b.Navigation("Station");
                });

            modelBuilder.Entity("RigaMetro.Models.TimeBetweenStations", b =>
                {
                    b.HasOne("RigaMetro.Models.Station", "FromStation")
                        .WithMany("TimeFrom")
                        .HasForeignKey("FromStationID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RigaMetro.Models.Station", "ToStation")
                        .WithMany("TimeTo")
                        .HasForeignKey("ToStationID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FromStation");

                    b.Navigation("ToStation");
                });

            modelBuilder.Entity("RigaMetro.Models.Train", b =>
                {
                    b.HasOne("RigaMetro.Models.Line", "Line")
                        .WithMany("Trains")
                        .HasForeignKey("LineID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Line");
                });

            modelBuilder.Entity("RigaMetro.Models.TrainAssignment", b =>
                {
                    b.HasOne("RigaMetro.Models.LineSchedule", "Schedule")
                        .WithMany("Assignments")
                        .HasForeignKey("ScheduleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RigaMetro.Models.Train", "Train")
                        .WithMany("Assignments")
                        .HasForeignKey("TrainID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Schedule");

                    b.Navigation("Train");
                });

            modelBuilder.Entity("RigaMetro.Models.Line", b =>
                {
                    b.Navigation("LineSchedules");

                    b.Navigation("LineStations");

                    b.Navigation("Trains");
                });

            modelBuilder.Entity("RigaMetro.Models.LineSchedule", b =>
                {
                    b.Navigation("Assignments");

                    b.Navigation("Stops");
                });

            modelBuilder.Entity("RigaMetro.Models.Station", b =>
                {
                    b.Navigation("TimeFrom");

                    b.Navigation("TimeTo");
                });

            modelBuilder.Entity("RigaMetro.Models.Train", b =>
                {
                    b.Navigation("Assignments");
                });
#pragma warning restore 612, 618
        }
    }
}
